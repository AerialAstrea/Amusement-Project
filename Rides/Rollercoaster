import java.util.*;

public class rollercoaster extends attraction {
    private int[][] cart = new int[2][3];
    private ArrayList<Ticket> regLine;
    private ArrayList<Ticket> fastLine;

    //class constructor
    public rollercoaster(){
        super();
        maxRiders = 6;
    }

    public rollercoaster(double t, double rC, double rL, int minH){
        super(6, t, rC, rL, minH);
    }

    public void getInLine(Ticket t){
        Ticket temp = new Ticket(checkTicket(t), t.hasFastPass(), t.getBalance());

        if(ticketPrice*temp.getPartySize() <= t.getBalance()){//if have enough balance to ride
            System.out.println("Welcome!");
            if(t.hasFastPass())
                fastLine.add(temp);
            else
                regLine.add(temp);
        }
        else{//if their balance is too low-
            Scanner s = new Scanner(System.in);
            while(t.getBalance() < ticketPrice*temp.getPartySize()){
                System.out.println("Sorry, your balance is too low. Would you like to reload it? (y/n)");
                String response = s.nextLine();
                if(response.equals("y")){
                    System.out.println("How much would you like to reload?");
                    Scanner i = new Scanner(System.in);
                    int reload = i.nextInt();
                    t.deposit(reload);
                }
                else{
                    System.out.println("Please exit the line");
                    break;
                }
            }
            if(t.hasFastPass())
                fastLine.add(temp);
            else
                regLine.add(temp);
        }
    }

    private ArrayList<Rider> checkTicket(Ticket t){ //class method to scan ticket (basically getInLine method but modified to return line)
        ArrayList<Rider> party = t.getRiders();
        ArrayList<Rider> validRiders = new ArrayList();
        for(Rider rider : party){
            if(rider.getHeight() < minHeight)
                System.out.println("Sorry, you do not meet the height requirement for this ride.");
            else if (t.getPartySize()>1){
                System.out.println("Please wait until all tickets are scanned");
                validRiders.add(rider); 
            }
            else
                validRiders.add(rider);
        }
        return validRiders;
    }

    public void run(){ 
        int currentNumRider = 0;
        if(time + rideLength <= closeTime){ //the ride will not run if it will past closing
            int counter = 0;
            while(currentNumRider < 6 && counter < getNumInLine()){
                int partySize = inLine.get(counter).getPartySize();
                if(partySize + currentNumRider < maxRiders)
                    currentNumRider += partySize;
                else
                    counter++;
            }
        }
        totalRiders += currentNumRider;
    }
}